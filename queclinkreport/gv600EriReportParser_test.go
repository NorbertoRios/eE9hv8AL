package queclinkreport

import (
	"fmt"
	"testing"
)

func TestGV600EriWithNegativeTemperature(t *testing.T) {
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x12, 0x00, 0x3E, 0xFF, 0xBF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x70, 0xFC, 0x10, 0x01, 0x04, 0x02, 0x01, 0x2C, 0x5E, 0x00, 0x10, 0x53, 0x1D, 0x00, 0x64, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x10, 0x00, 0x01, 0x28, 0x73, 0x41, 0x52, 0x05, 0x00, 0x00, 0x11, 0x01, 0x02, 0xFE, 0xFA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xB2, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x03, 0xEA, 0xEA, 0x00, 0x00, 0x04, 0xDB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE2, 0x0C, 0x15, 0x03, 0x35, 0x21, 0x35, 0xD0, 0x0B, 0x59, 0x0D, 0x0A}
	config := &ReportConfiguration{}
	LoadReportConfiguration("..", "/ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGV600EriWithNegativeTemperature]Failed; Error%v", err))
	}
	if messages[0].GetTemperatureSensors() == nil {
		t.Error(fmt.Sprintf("[TestGV600EriWithNegativeTemperature]Invalid temperatures; Error%v", err))
	}
}

func TestGV600MGMessage(t *testing.T) {
	packet := []byte{0x2b, 0x42, 0x53, 0x50, 0x0b, 0x00, 0x3e, 0x1f, 0xbf, 0x00, 0x58, 0xdc, 0x01, 0x00, 0x01, 0x05, 0x56, 0x34, 0x54, 0x04, 0x5d, 0x07, 0x3d, 0x08, 0x64, 0x00, 0x00, 0x00, 0x00, 0x11, 0x0c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xf8, 0xae, 0xc6, 0xda, 0x02, 0xef, 0x5d, 0x80, 0x07, 0xe4, 0x06, 0x13, 0x09, 0x00, 0x1f, 0x01, 0x2e, 0x02, 0xd0, 0x1f, 0xa4, 0x00, 0x00, 0xbd, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe4, 0x06, 0x13, 0x09, 0x00, 0x1f, 0x1f, 0xaa, 0xfe, 0x27, 0x0d, 0x0a}
	config := &ReportConfiguration{}
	LoadReportConfiguration("..", "/ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGV600MGMessage]Failed; Error%v", err))
	}
	if messages == nil {
		t.Error(fmt.Sprintf("[TestGV600MGMessage]Invalid messages; Err: %v", err))
	}

}
