package queclinkreport

import (
	"encoding/json"
	"fmt"
	"reflect"
	"testing"

	"queclink-go/base.device.service/report"
	"queclink-go/base.device.service/utils"
	devicetesting "queclink-go/base.device.service/utils/deviceTesting"
	"queclink-go/queclinkreport/fields"
)

func TestGTTOWgv75W(t *testing.T) {
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x01, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x58, 0x41, 0x04, 0x00, 0x04, 0x08, 0x56, 0x30, 0x02, 0x03, 0x00, 0x43, 0x1A, 0x02, 0x62, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0B, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x08, 0xC1, 0xFA, 0x15, 0x6C, 0x88, 0x01, 0x30, 0xE1, 0xA6, 0x07, 0xE2, 0x0C, 0x1A, 0x01, 0x2A, 0x04, 0x03, 0x34, 0x00, 0x50, 0x76, 0x2B, 0x00, 0x1A, 0x39, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x47, 0x02, 0x07, 0xE2, 0x0C, 0x1A, 0x01, 0x2A, 0x05, 0xA0, 0xA3, 0x94, 0x1D, 0x0D, 0x0A}
	strMessage := "{\"Data\":{\"MessageHeader\":\"+RSP\",\"MessageType\":1,\"ReportMask\":4071359,\"GPSAccuracy\":1,\"Speed\":0.0,\"Heading\":158,\"Altitude\":2241,\"Longitude\":-99.259256,\"Latitude\":19.98071,\"GPSUTCTime\":\"2018-12-26T01:42:04Z\",\"MCC\":820,\"MNC\":80,\"LAC\":30251,\"CellId\":1718727,\"Reserved\":0,\"Length\":88,\"DeviceType\":65,\"ProtocolVersion\":1024,\"FirmwareVersion\":1032,\"UniqueId\":\"864802030067262\",\"BatteryPercentage\":98,\"Supply\":0,\"DigitalInputStatus\":0,\"Relay\":0,\"MotionStatus\":22,\"Satellites\":11,\"ReportId_Type\":0,\"Number\":1,\"CurrentMileage\":0.0,\"Odometer\":5447200.0,\"SendTime\":\"2018-12-26T01:42:05Z\",\"CountNumber\":41123,\"Checksum\":37917,\"TailCharacter\":3338,\"DevId\":\"queclink_864802030067262\",\"TimeStamp\":\"2018-12-26T01:42:05Z\",\"IgnitionState\":0,\"GPIO\":0,\"GpsValidity\":1,\"ReceivedTime\":\"2018-12-26T01:42:05Z\",\"PowerState\":5}}"
	testMessage, _ := deserializeTestMessage(strMessage)
	BaseMessageTest(t, packet, testMessage, "TestGTTOWgv75W")
}

func TestGTEPSgv55L(t *testing.T) {
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x04, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x56, 0x2F, 0x04, 0x02, 0x04, 0x05, 0x56, 0x15, 0x5D, 0x02, 0x44, 0x40, 0x2E, 0x02, 0x5C, 0x31, 0x1F, 0x00, 0x00, 0x11, 0x05, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0xFB, 0x33, 0xBE, 0x0F, 0x02, 0x97, 0x04, 0xE1, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x05, 0x0E, 0x03, 0x02, 0x07, 0x20, 0x1B, 0x6C, 0x58, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xEE, 0x02, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x05, 0x0E, 0x44, 0x6C, 0x0C, 0x78, 0x0D, 0x0A}
	strMessage := "{\"Data\":{\"MessageHeader\":\"+RSP\",\"MessageType\":4,\"ReportMask\":4071359,\"GPSAccuracy\":2,\"Speed\":0.0,\"Heading\":0,\"Altitude\":353,\"Longitude\":-80.495089,\"Latitude\":43.451617,\"GPSUTCTime\":\"2018-12-26T00:05:14Z\",\"MCC\":770,\"MNC\":1824,\"LAC\":7020,\"CellId\":22593,\"Reserved\":0,\"Length\":86,\"DeviceType\":47,\"ProtocolVersion\":1026,\"FirmwareVersion\":1029,\"UniqueId\":\"862193026864462\",\"BatteryPercentage\":92,\"Supply\":12575,\"DigitalInputStatus\":0,\"Relay\":0,\"MotionStatus\":17,\"Satellites\":5,\"ReportId_Type\":1,\"Number\":1,\"CurrentMileage\":0.0,\"Odometer\":17902200.0,\"SendTime\":\"2018-12-26T00:05:14Z\",\"CountNumber\":17516,\"Checksum\":3192,\"TailCharacter\":3338,\"DevId\":\"queclink_862193026864462\",\"TimeStamp\":\"2018-12-26T00:05:14Z\",\"IgnitionState\":0,\"GPIO\":0,\"GpsValidity\":1,\"ReceivedTime\":\"2018-12-26T00:05:16Z\",\"PowerState\":3}}"
	testMessage, _ := deserializeTestMessage(strMessage)
	BaseMessageTest(t, packet, testMessage, "TestGTEPSgv55L")
}

func TestGTEPSgv55N(t *testing.T) {
	packet := []byte{0x2B, 0x42, 0x53, 0x50, 0x04, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x56, 0x2F, 0x02, 0x00, 0x02, 0x04, 0x56, 0x15, 0x5D, 0x02, 0x40, 0x59, 0x53, 0x01, 0x5C, 0x31, 0x34, 0x00, 0x00, 0x11, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x07, 0x20, 0x3E, 0xE4, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA7, 0x49, 0x09, 0x07, 0xE2, 0x0C, 0x19, 0x16, 0x3A, 0x20, 0xE0, 0x6E, 0xDE, 0xF7, 0x0D, 0x0A}
	strMessage := "{\"Data\":{\"MessageHeader\":\"+BSP\",\"MessageType\":4,\"ReportMask\":4071359,\"GPSAccuracy\":0,\"Speed\":0.0,\"Heading\":0,\"Altitude\":0,\"Longitude\":0.0,\"Latitude\":0.0,\"GPSUTCTime\":\"1989-01-01T00:00:00Z\",\"MCC\":770,\"MNC\":1824,\"LAC\":16100,\"CellId\":57423,\"Reserved\":0,\"Length\":86,\"DeviceType\":47,\"ProtocolVersion\":512,\"FirmwareVersion\":516,\"UniqueId\":\"862193026489831\",\"BatteryPercentage\":92,\"Supply\":12596,\"DigitalInputStatus\":0,\"Relay\":0,\"MotionStatus\":17,\"Satellites\":0,\"ReportId_Type\":1,\"Number\":1,\"CurrentMileage\":0.0,\"Odometer\":42825900.0,\"SendTime\":\"2018-12-25T22:58:32Z\",\"CountNumber\":57454,\"Checksum\":57079,\"TailCharacter\":3338,\"DevId\":\"queclink_862193026489831\",\"TimeStamp\":\"1989-01-01T00:00:00Z\",\"IgnitionState\":0,\"GPIO\":0,\"GpsValidity\":0,\"ReceivedTime\":\"2018-12-26T00:00:05Z\",\"PowerState\":3}}"
	testMessage, _ := deserializeTestMessage(strMessage)
	BaseMessageTest(t, packet, testMessage, "TestGTEPSgv55N")
}

func TestGTEPSgv55NL(t *testing.T) {
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x04, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x56, 0x2F, 0x04, 0x02, 0x04, 0x05, 0x56, 0x15, 0x5D, 0x02, 0x44, 0x4C, 0x41, 0x06, 0x5B, 0x30, 0xD8, 0x00, 0x00, 0x11, 0x05, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xFB, 0x28, 0xB9, 0xBE, 0x02, 0x8F, 0x12, 0xC3, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x0F, 0x1E, 0x03, 0x02, 0x07, 0x20, 0x1B, 0x62, 0x78, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3B, 0x09, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x0F, 0x1F, 0x53, 0xAE, 0x78, 0x66, 0x0D, 0x0A}
	strMessage := "{\"Data\":{\"MessageHeader\":\"+RSP\",\"MessageType\":4,\"ReportMask\":4071359,\"GPSAccuracy\":2,\"Speed\":0.0,\"Heading\":0,\"Altitude\":249,\"Longitude\":-81.21709,\"Latitude\":42.930883,\"GPSUTCTime\":\"2018-12-26T00:15:30Z\",\"MCC\":770,\"MNC\":1824,\"LAC\":7010,\"CellId\":30853,\"Reserved\":0,\"Length\":86,\"DeviceType\":47,\"ProtocolVersion\":1026,\"FirmwareVersion\":1029,\"UniqueId\":\"862193026876656\",\"BatteryPercentage\":91,\"Supply\":12504,\"DigitalInputStatus\":0,\"Relay\":0,\"MotionStatus\":17,\"Satellites\":5,\"ReportId_Type\":1,\"Number\":1,\"CurrentMileage\":0.0,\"Odometer\":3899900.0,\"SendTime\":\"2018-12-26T00:15:31Z\",\"CountNumber\":21422,\"Checksum\":30822,\"TailCharacter\":3338,\"DevId\":\"queclink_862193026876656\",\"TimeStamp\":\"2018-12-26T00:15:31Z\",\"IgnitionState\":0,\"GPIO\":0,\"GpsValidity\":1,\"ReceivedTime\":\"2018-12-26T00:15:32Z\",\"PowerState\":3}}"
	testMessage, _ := deserializeTestMessage(strMessage)
	BaseMessageTest(t, packet, testMessage, "TestGTEPSgv55NL")
}

func TestGTEPSgv75(t *testing.T) {
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x04, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x56, 0x2F, 0x04, 0x02, 0x04, 0x05, 0x56, 0x15, 0x5D, 0x02, 0x44, 0x44, 0x37, 0x04, 0x5A, 0x31, 0x72, 0x00, 0x00, 0x11, 0x06, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xF8, 0xAA, 0xC4, 0xE3, 0x02, 0xEF, 0x11, 0xA3, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x08, 0x05, 0x03, 0x02, 0x07, 0x20, 0x3E, 0x80, 0x35, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x0A, 0x07, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x08, 0x05, 0xBD, 0xCC, 0xF2, 0xAE, 0x0D, 0x0A}
	strMessage := "{\"Data\":{\"MessageHeader\":\"+RSP\",\"MessageType\":4,\"ReportMask\":4071359,\"GPSAccuracy\":1,\"Speed\":0.0,\"Heading\":0,\"Altitude\":120,\"Longitude\":-123.026205,\"Latitude\":49.222051,\"GPSUTCTime\":\"2018-12-26T00:08:05Z\",\"MCC\":770,\"MNC\":1824,\"LAC\":16000,\"CellId\":13711,\"Reserved\":0,\"Length\":86,\"DeviceType\":47,\"ProtocolVersion\":1026,\"FirmwareVersion\":1029,\"UniqueId\":\"862193026868554\",\"BatteryPercentage\":90,\"Supply\":12658,\"DigitalInputStatus\":0,\"Relay\":0,\"MotionStatus\":17,\"Satellites\":6,\"ReportId_Type\":1,\"Number\":1,\"CurrentMileage\":0.0,\"Odometer\":15114700.0,\"SendTime\":\"2018-12-26T00:08:05Z\",\"CountNumber\":48588,\"Checksum\":62126,\"TailCharacter\":3338,\"DevId\":\"queclink_862193026868554\",\"TimeStamp\":\"2018-12-26T00:08:05Z\",\"IgnitionState\":0,\"GPIO\":0,\"GpsValidity\":1,\"ReceivedTime\":\"2018-12-26T00:08:07Z\",\"PowerState\":3}}"
	testMessage, _ := deserializeTestMessage(strMessage)
	BaseMessageTest(t, packet, testMessage, "TestGTEPSgv75")
}

func TestGTEPSgv55w(t *testing.T) {
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x04, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x56, 0x2F, 0x04, 0x02, 0x04, 0x05, 0x56, 0x15, 0x5D, 0x02, 0x44, 0x44, 0x26, 0x00, 0x5D, 0x2D, 0xBD, 0x00, 0x00, 0x11, 0x09, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xF8, 0xA9, 0xB1, 0x6D, 0x02, 0xF0, 0x88, 0xD7, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x03, 0x01, 0x03, 0x02, 0x07, 0x20, 0x3E, 0xE4, 0xBB, 0xB5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0x05, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x03, 0x00, 0xC9, 0x67, 0xE6, 0x07, 0x0D, 0x0A}
	strMessage := "{\"Data\":{\"MessageHeader\":\"+RSP\",\"MessageType\":4,\"ReportMask\":4071359,\"GPSAccuracy\":1,\"Speed\":0.0,\"Heading\":0,\"Altitude\":4,\"Longitude\":-123.096723,\"Latitude\":49.318103,\"GPSUTCTime\":\"2018-12-26T00:03:01Z\",\"MCC\":770,\"MNC\":1824,\"LAC\":16100,\"CellId\":48053,\"Reserved\":0,\"Length\":86,\"DeviceType\":47,\"ProtocolVersion\":1026,\"FirmwareVersion\":1029,\"UniqueId\":\"862193026868380\",\"BatteryPercentage\":93,\"Supply\":11709,\"DigitalInputStatus\":0,\"Relay\":0,\"MotionStatus\":17,\"Satellites\":9,\"ReportId_Type\":1,\"Number\":1,\"CurrentMileage\":0.0,\"Odometer\":2184500.0,\"SendTime\":\"2018-12-26T00:03:00Z\",\"CountNumber\":51559,\"Checksum\":58887,\"TailCharacter\":3338,\"DevId\":\"queclink_862193026868380\",\"TimeStamp\":\"2018-12-26T00:03:00Z\",\"IgnitionState\":0,\"GPIO\":0,\"GpsValidity\":1,\"ReceivedTime\":\"2018-12-26T00:03:04Z\",\"PowerState\":3}}"
	testMessage, _ := deserializeTestMessage(strMessage)
	BaseMessageTest(t, packet, testMessage, "TestGTEPSgv55w")
}

func TestGV600MGMessages(t *testing.T) {
	packet := []byte{0x2B, 0x42, 0x53, 0x50, 0x12, 0x00, 0x3E, 0x9F, 0xBF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x78, 0xDC, 0x01, 0x00, 0x01, 0x05, 0x56, 0x34, 0x54, 0x04, 0x5C, 0x4E, 0x4E, 0x05, 0x64, 0x34, 0x72, 0x34, 0x31, 0x00, 0x00, 0x11, 0x0B, 0x10, 0x00, 0x02, 0x28, 0xFF, 0x9D, 0x19, 0x03, 0x17, 0x04, 0xBF, 0x01, 0x02, 0x00, 0x4A, 0x28, 0xFF, 0xFF, 0x5F, 0xA1, 0x16, 0x04, 0xB9, 0x01, 0x02, 0xFF, 0xE6, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0xFB, 0xE9, 0x2F, 0x79, 0x02, 0xD1, 0x32, 0x75, 0x07, 0xE4, 0x07, 0x0D, 0x10, 0x0A, 0x2B, 0x01, 0x36, 0x01, 0x9A, 0x07, 0x04, 0x03, 0x86, 0xEF, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE4, 0x07, 0x0D, 0x10, 0x0A, 0x2D, 0x2B, 0x90, 0x38, 0x19, 0x0D, 0x0A}
	config := &ReportConfiguration{}
	LoadReportConfiguration("ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGTTOW]Failed; Error%v", err))
	}
	if len(messages) == 0 {
		t.Error(fmt.Sprintf("[TestGTTOW]Count of messages is 0"))
	}
	data := messages[0].GetData()
	if data == nil {

	}
}

func BaseMessageTest(t *testing.T, packet []byte, origin report.IMessage, method string) {
	config := &ReportConfiguration{}
	LoadReportConfiguration("ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGTTOW]Failed; Error%v", err))
	}
	if len(messages) == 0 {
		t.Error(fmt.Sprintf("[TestGTTOW]Count of messages is 0"))
	}

	compareMessages(t, method, messages[0], origin)
	compareMessagesReverse(t, method, messages[0], origin)
}

func compareMessages(t *testing.T, method string, test report.IMessage, origin report.IMessage) {
	data := test.GetData()
	for k, value := range *data {
		if originValue, found := origin.GetValue(k); found {
			originValue = devicetesting.AssertType(value, originValue)
			if !reflect.DeepEqual(value, originValue) {
				t.Error(fmt.Sprintf("[%v] Defferent values; field: %v; test:%v, origin:%v", method, k, value, originValue))
			}
		}
	}
}

func compareMessagesReverse(t *testing.T, method string, test report.IMessage, origin report.IMessage) {
	data := test.GetData()
	for k, value := range *data {
		if originValue, found := origin.GetValue(k); found {
			switch originValue.(type) {
			case *utils.JSONTime:
				{
					continue
				}
			}
			originValue = devicetesting.AssertType(value, originValue)
			if !reflect.DeepEqual(value, originValue) {
				t.Error(fmt.Sprintf("[%v] Defferent values; field: %v; test:%v, origin:%v", method, k, value, originValue))
			}
		}
	}
}

func deserializeTestMessage(message string) (report.IMessage, error) {
	mesg := NewQueclinkMessage()
	err := json.Unmarshal([]byte(message), mesg)
	return mesg, err
}

func TestGV300WEriMessageParsing(t *testing.T) {
	//packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x12, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x5F, 0x27, 0x0B, 0x01, 0x0B, 0x0B, 0x56, 0x47, 0x3E, 0x02, 0x32, 0x27, 0x29, 0x03, 0x5D, 0x30, 0x6D, 0x01, 0x00, 0x21, 0x03, 0x10, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x16, 0x01, 0x1B, 0x02, 0x3D, 0x93, 0x8C, 0x02, 0xE7, 0xCC, 0x87, 0x07, 0xE4, 0x08, 0x1B, 0x0C, 0x25, 0x30, 0x02, 0x55, 0x00, 0x03, 0xEA, 0xEA, 0x01, 0x37, 0x7D, 0x57, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0xE4, 0x08, 0x1B, 0x0C, 0x29, 0x1E, 0xB2, 0x6D, 0xAD, 0x4D, 0x0D, 0x0A}
	packet := []byte{0x2B, 0x42, 0x53, 0x50, 0x12, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x5F, 0x27, 0x0B, 0x01, 0x0B, 0x0B, 0x56, 0x47, 0x3E, 0x02, 0x32, 0x27, 0x29, 0x03, 0x3F, 0x2F, 0x78, 0x01, 0x00, 0x21, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x68, 0x02, 0x3D, 0x9A, 0xA6, 0x02, 0xE7, 0xD0, 0x23, 0x07, 0xE4, 0x09, 0x01, 0x09, 0x04, 0x30, 0x02, 0x55, 0x00, 0x03, 0xEA, 0xEA, 0x01, 0x37, 0x2F, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE4, 0x09, 0x01, 0x09, 0x04, 0x3A, 0xB5, 0xDA, 0x7A, 0xC3, 0x0D, 0x0A}
	config := &ReportConfiguration{}
	LoadReportConfiguration("ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGTERI]Failed; Error%v", err))
	}
	if len(messages) == 0 {
		t.Error(fmt.Sprintf("[TestGTTOW]Count of messages is 0"))
	}
	_, f := messages[0].GetValue(fields.FuelLevel)
	if !f {
		t.Error("Cant find fuel level data")
	}
	jMessage, jerr := json.Marshal(messages[0])
	if jerr != nil {
		t.Error("Marshal Response data error:", jerr)
	}
	t.Error(string(jMessage))
}

func TestGTLBCReport(t *testing.T) {
	packet := []byte{0x2B, 0x42, 0x53, 0x50, 0x03, 0x00, 0x3E, 0x17, 0xBF, 0x00, 0x5C, 0x10, 0x03, 0x00, 0x08, 0x04, 0x56, 0x15, 0x5D, 0x02, 0x0D, 0x4C, 0x36, 0x06, 0x2F, 0xD8, 0x00, 0x01, 0x10, 0x08, 0x00, 0x71, 0x38, 0x06, 0x75, 0x67, 0x71, 0x94, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x02, 0x3D, 0x98, 0xC8, 0x02, 0xE7, 0xCF, 0x51, 0x07, 0xE3, 0x01, 0x19, 0x0A, 0x06, 0x2F, 0x02, 0x55, 0x00, 0x03, 0xEA, 0xEA, 0x04, 0xDB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0x01, 0x19, 0x0A, 0x06, 0x30, 0xEF, 0xC2, 0x3D, 0xB5, 0x0D, 0x0A}
	config := &ReportConfiguration{}
	LoadReportConfiguration("ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGTTOW]Failed; Error%v", err))
	}
	if len(messages) == 0 {
		t.Error(fmt.Sprintf("[TestGTTOW]Count of messages is 0"))
	}
	ip, _ := messages[0].GetValue(fields.PhoneNumber)

	if ip.(string) != "+380675677194" {
		t.Error(fmt.Sprintf("[TestGTLBCReport]Invalid phone"))
	}
}

func TestInvalidPacket(t *testing.T) {
	packet := []byte{0x41, 0x54, 0x2B, 0x43, 0x53, 0x51, 0x0D}
	config := &ReportConfiguration{}
	LoadReportConfiguration("ReportConfiguration.xml", config)
	parser := Parser{}
	messages, err := parser.Parse(packet)
	if err == nil {
		t.Error(fmt.Sprintf("[TestInvalidPacket]Failed; Error is null for invalid packet"))
	}
	if len(messages) != 0 {
		t.Error(fmt.Sprintf("[TestInvalidPacket]Failed; Messages is not empty"))
	}
}
