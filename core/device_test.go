package core

import (
	"fmt"
	"net"
	"testing"
	"time"

	"queclink-go/base.device.service/core"
	"queclink-go/base.device.service/service"

	"queclink-go/base.device.service/comm"
	"queclink-go/base.device.service/core/models"
	"queclink-go/qapi/qcontroller"
	"queclink-go/qconfig"
	"queclink-go/queclinkreport"
	"queclink-go/queclinkreport/devicetypes"
)

func TestGV55WProcessMessage(t *testing.T) {
	packet := []byte{0x2B, 0x42, 0x56, 0x54, 0x07, 0x03, 0xFE, 0x1F, 0xFF, 0x00, 0xB9, 0x41, 0x04, 0x00, 0x04, 0x08, 0x67, 0x76, 0x37, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x0A, 0x01, 0x00, 0x00, 0x33, 0x01, 0x01, 0x17, 0x02, 0x59, 0xFA, 0x72, 0xA2, 0x64, 0x00, 0xFF, 0x93, 0x70, 0x07, 0xE3, 0x02, 0x18, 0x13, 0x1D, 0x22, 0x03, 0x34, 0x00, 0x20, 0x2F, 0x56, 0x06, 0x5E, 0x2C, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x99, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0x02, 0x18, 0x13, 0x1D, 0x38, 0x98, 0xEE, 0x3A, 0xD2, 0x0D, 0x0A}
	config := &queclinkreport.ReportConfiguration{}
	queclinkreport.LoadReportConfiguration("../queclinkreport/ReportConfiguration.xml", config)
	parser := queclinkreport.Parser{}
	messages, err := parser.Parse(packet)
	if err != nil {
		t.Error(fmt.Sprintf("[TestGTTOW]Failed; Error%v", err))
	}
	if len(messages) == 0 {
		t.Error(fmt.Sprintf("[TestGTTOW]Count of messages is 0"))
	}
	device := &QDeviceGV55W{}
	device.SetDefaults(devicetypes.GV55W)
	device.SetChannel(&comm.UDPChannel{
		ClientAddr: &net.UDPAddr{},
	})
	device.Activity = &models.DeviceActivity{}

	device.ProcessMessage(messages[0])
}

func TestHandleConfiguratiuonAck(t *testing.T) {
	device := &QDeviceGV55W{}
	device.SetDefaults(devicetypes.GV55W)
	device.SetChannel(&comm.UDPChannel{
		ClientAddr: &net.UDPAddr{},
	})
	device.Activity = &models.DeviceActivity{}
	confItem := &core.ConfigurationItemAPI{
		CallbackID:   "",
		CreationTime: time.Now().UTC(),
		TTL:          30,
	}

	confItem.Command = "AT+GTEPS=gv55,1,250,26000,1,1,0,0,0,0,1,0,0,,FFFF$"
	confItem.MessageType = "16"
	confItem.Type = "api_request"

	device.GetConfiguration().AddCommand(confItem, true)
}

func TestGV350ProcessMessage(t *testing.T) {
	serviceInstance := &service.Base{}
	service.InitializeInstance(serviceInstance)
	dm := &QueclinkDM{}
	dm.DeviceManager.InitializeDeviceCallback = dm.InitializeDevice
	dm.DeviceManager.InitializeUDPDeviceCallback = dm.InitializeUDPDevice
	serviceInstance.ConfigureDeviceManager(dm).
		ConfigureConfig("../service/credentials.json", &qconfig.QConfiguration{}).
		ConfigureReport("ReportConfiguration.xml", &queclinkreport.ReportConfiguration{}).
		ConfigureParser(&queclinkreport.Parser{}).
		ConfigureApi(&qcontroller.QController{}).
		Initialize()

	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x04, 0x00, 0x3E, 0x1F, 0xBF, 0x00, 0x56, 0xF1, 0x04, 0x02, 0x04, 0x05, 0x57, 0x15, 0x5D, 0x02, 0x44, 0x40, 0x2E, 0x02, 0x5C, 0x31, 0x1F, 0x00, 0x00, 0x11, 0x05, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0xFB, 0x33, 0xBE, 0x0F, 0x02, 0x97, 0x04, 0xE1, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x05, 0x0E, 0x03, 0x02, 0x07, 0x20, 0x1B, 0x6C, 0x58, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xEE, 0x02, 0x07, 0xE2, 0x0C, 0x1A, 0x00, 0x05, 0x0E, 0x44, 0x6C, 0x0C, 0x78, 0x0D, 0x0A}
	reportconfig := &queclinkreport.ReportConfiguration{}
	queclinkreport.LoadReportConfiguration("../queclinkreport/ReportConfiguration.xml", reportconfig)
	parser := queclinkreport.Parser{}
	messages, _ := parser.Parse(packet)

	device, _ := dm.InitializeUDPDevice(&comm.UDPChannel{ClientAddr: &net.UDPAddr{}}, messages[0])

	device.ProcessMessage(messages[0])
}

func TestGV300WLocationMessageProcess(t *testing.T) {
	serviceInstance := &service.Base{}
	service.InitializeInstance(serviceInstance)
	dm := &QueclinkDM{}
	dm.DeviceManager.InitializeDeviceCallback = dm.InitializeDevice
	dm.DeviceManager.InitializeUDPDeviceCallback = dm.InitializeUDPDevice
	serviceInstance.ConfigureDeviceManager(dm).
		ConfigureConfig("../service/credentials.json", &qconfig.QConfiguration{}).
		ConfigureReport("ReportConfiguration.xml", &queclinkreport.ReportConfiguration{}).
		ConfigureParser(&queclinkreport.Parser{}).
		ConfigureApi(&qcontroller.QController{}).
		Initialize()

	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x10, 0x00, 0xFE, 0xDF, 0xFF, 0x00, 0x65, 0x27, 0x02, 0x03, 0x02, 0x0C, 0x47, 0x56, 0x33, 0x30, 0x30, 0x57, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x21, 0x1C, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x06, 0xFC, 0x5A, 0x68, 0x01, 0xE5, 0xBC, 0x50, 0x07, 0xDF, 0x0A, 0x0A, 0x06, 0x2B, 0x27, 0x04, 0x60, 0x00, 0x01, 0xD5, 0x04, 0x08, 0x04, 0x27, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xDF, 0x0A, 0x0A, 0x06, 0x2B, 0x27, 0x00, 0x19, 0x01, 0x0C, 0x0D, 0x0A}
	reportconfig := &queclinkreport.ReportConfiguration{}
	queclinkreport.LoadReportConfiguration("../queclinkreport/ReportConfiguration.xml", reportconfig)
	parser := queclinkreport.Parser{}
	messages, _ := parser.Parse(packet)

	device, _ := dm.InitializeUDPDevice(&comm.UDPChannel{ClientAddr: &net.UDPAddr{}}, messages[0])

	device.ProcessMessage(messages[0])
}

func TestGV300WGTERIProcessMessage(t *testing.T) {
	serviceInstance := &service.Base{}
	service.InitializeInstance(serviceInstance)
	dm := &QueclinkDM{}
	dm.DeviceManager.InitializeDeviceCallback = dm.InitializeDevice
	dm.DeviceManager.InitializeUDPDeviceCallback = dm.InitializeUDPDevice
	serviceInstance.ConfigureDeviceManager(dm).
		ConfigureConfig("../service/credentials.json", &qconfig.QConfiguration{}).
		ConfigureReport("ReportConfiguration.xml", &queclinkreport.ReportConfiguration{}).
		ConfigureParser(&queclinkreport.Parser{}).
		ConfigureApi(&qcontroller.QController{}).
		Initialize()
	packet := []byte{0x2B, 0x52, 0x53, 0x50, 0x12, 0x00, 0xFE, 0xEF, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x79, 0x27, 0x02, 0x03, 0x02, 0x0D, 0x47, 0x56, 0x33, 0x30, 0x30, 0x57, 0x41, 0x30, 0x64, 0x00, 0x33, 0x00, 0x61, 0x00, 0x5F, 0x01, 0x01, 0x21, 0x18, 0x50, 0x00, 0x00, 0x00, 0x02, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x06, 0xFC, 0x5A, 0x65, 0x01, 0xE5, 0xBB, 0xF7, 0x07, 0xDF, 0x0A, 0x0D, 0x02, 0x11, 0x3B, 0x04, 0x60, 0x00, 0x01, 0xD5, 0xD6, 0x08, 0x06, 0x2B, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xDF, 0x0A, 0x0D, 0x0A, 0x12, 0x03, 0x91, 0x8E, 0x02, 0xE9, 0x0D, 0x0A, 0x2B, 0x52, 0x53, 0x50, 0x12, 0x01, 0xFE, 0xDF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x79, 0x06, 0x02, 0x06, 0x06, 0x02, 0x67, 0x76, 0x33, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x10, 0x10, 0x02, 0x01, 0x28, 0xED, 0x29, 0x41, 0x03, 0x00, 0x00, 0xFD, 0x01, 0x02, 0x01, 0x9D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x56, 0x78, 0x2D, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xDE, 0x04, 0x06, 0x04, 0x0E, 0x27, 0x00, 0x36, 0xAA, 0x83, 0x0D, 0x0A}
	reportconfig := &queclinkreport.ReportConfiguration{}
	queclinkreport.LoadReportConfiguration("../queclinkreport/ReportConfiguration.xml", reportconfig)
	parser := queclinkreport.Parser{}
	messages, _ := parser.Parse(packet)

	device, _ := dm.InitializeUDPDevice(&comm.UDPChannel{ClientAddr: &net.UDPAddr{}}, messages[0])

	device.ProcessMessage(messages[0])
}
